<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1485295039796">{:repl-history {:ide [], :local [&quot;(* 1 2 3)&quot; &quot;(range 1 10)&quot; &quot;(+ 1 2)&quot; &quot;(range 1 100)&quot; &quot;(doc filter)&quot; &quot;(-&gt;&gt; (range 1 100)\n     (filter #(or (= 0 (mod % 3))\n                  (= 0 (mod % 5)))))&quot; &quot;(def up-to 30)&quot; &quot;(-&gt;&gt; (range 1 up-to)\n     (filter #(or (= 0 (mod % 3))\n                  (= 0 (mod % 5)))))&quot; &quot;(-&gt;&gt; (range 1 up-to)\n     (filter #(or (= 0 (mod % 3))\n                  (= 0 (mod % 5))))\n     +)&quot; &quot;(def up-to 1000)&quot; &quot;(-&gt;&gt; (range 1 up-to)\n     (filter #(or (= 0 (mod % 3))\n                  (= 0 (mod % 5))))\n     (apply +))&quot; &quot;(def start-nums [1 2])&quot; &quot;(def fib-seq \n  (lazy-cat start-nums (map + (rest fib-seq) fib-seq)))&quot; &quot;(take 10 fib-seq)&quot; &quot;(apply + (take-while #(&lt; % up-to) fib-seq))&quot; &quot;(def up-to 100)&quot; &quot;(take-while #(&lt; % up-to) fib-seq)&quot; &quot;(-&gt;&gt; (take-while #(&lt; % up-to) fib-seq)\n     (filter even?))&quot; &quot;(def up-to 4000000)&quot; &quot;(-&gt;&gt; (take-while #(&lt; % up-to) fib-seq)\n     (filter even?)\n     (apply +))&quot;], :remote []}}</component>
</project>